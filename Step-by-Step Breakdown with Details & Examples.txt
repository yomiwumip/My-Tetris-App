
## ðŸ”§ Step-by-Step Breakdown with Details & Examples (Including Service Connection Names)

---

### Step 1: Create an Azure Container Registry (ACR)

1. Go to Azure Portal â†’ Container Registries â†’ Create
2. Fill in:

   *Name: `mylab22` (must be unique)
   *Resource Group: Create a new one (e.g., `myResourceGroup`)
   *Location: Choose your location
   *SKU: Standard
3. Click Create

---

### Step 2: Create Azure DevOps Project

1. Go to Azure DevOps Portal
2. Create a new project:

   *Name: `my-lab-project`
   *Visibility: Private
3. Click Create

---

### Step 3: Create Service Connections

You need 2 service connections:

#### A. Service Connection for Azure Container Registry (ACR)

1. Go to Project Settings â†’ Service Connections â†’ New
2. Choose Docker Registry
3. Select:

   *Docker Registry Type: Azure Container Registry
   *Authentication Type: Service Principal
   * Fill in the username and password from the Azure Container Registry â†’ Access keys
   * Check Grant access to all pipelines
   *Service Connection Name: `ACR-Service-Connection`
4. Save

#### B. Service Connection for GitHub

1. Go to New Service Connection â†’ GitHub
2. Use OAuth to authenticate
3. Grant access to all pipelines
4. Service Connection Name: `GitHub-Service-Connection`
5. Save

---

### Step 4: Create Build Pipeline (CI)

1. Go to Pipelines â†’ Create Pipeline
2. Choose GitHub, then select your repo (e.g., `Tetris game app`)
3. Choose template: Docker build and push an image to Azure Container Registry
4. Fill in:

   *Subscription: Your Azure subscription
   *Container Registry: `mylab22`
   *Image Name: `tetris-game-app`
   *Service Connection Name: `GitHub-Service-Connection` (to link the pipeline with GitHub)
5. Click Save and Run

---

### Step 5: Create Linux Web App for Containers

1. Go to Azure Portal â†’ App Services â†’ Create

2. Configure:

   *Resource Group: Select existing one
   *Name: `tetris-container-app`
   *OS: Linux
   *Publish: Docker Container
   *Region: Select your preferred region

3. Under Docker settings:

   *Image Source: Azure Container Registry
   *Registry: `mylab22`
   *Image: `tetris-game-app`

4. Enable Admin user under ACR â†’ Access keys

---

### Step 6: Create Release Pipeline (CD)

1. In Azure DevOps â†’ Pipelines â†’ Releases â†’ New Pipeline

2. Select template: Azure App Service Deployment

3. Add artifact:

   *Source Type: Build
   *Project: Your DevOps project
   *Default Version: Latest

4. Enable Continuous Deployment trigger

5. In Stage 1 task:

   *App Type: Web App for Containers
   *App Service: `tetris-container-app`
   *Registry: `mylab22.azurecr.io`
   *Repository: `tetris-game-app`
   *Service Connection Name: `ACR-Service-Connection` (to link ACR with the pipeline)

6. Click Save â†’ Create Release

---

### Step 7: Update App Configuration

1. Go to Azure Portal â†’ App Service â†’ Configuration
2. Add a new Application Setting:

   *Name: `WEBSITES_PORT`
   *Value: `3000`
3. Save & Restart App

---

### Step 8: Test the Pipeline

1. Change a file in your GitHub repo (e.g., change color in the UI)

   * Example: Change `"green"` to `"white"` in the text `Let's Play`
2. Push changes to GitHub

ðŸ”„ This triggers:

*Build Pipeline â†’ Builds and pushes image to ACR
*Release Pipeline â†’ Deploys the new image to App Service

3. Refresh your app URL to see the changes live.

---

## âœ… Final Outcome

Now, you have an automatedCI/CD pipeline that uses Azure DevOps, GitHub,
Azure Container Registry, and Azure App Service for deploying Dockerized applications. 
Changes to the GitHub repository trigger the build and release pipelines.
